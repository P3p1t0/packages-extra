--- zfs-0.7.8/include/linux/blkdev_compat.h.orig	2018-03-15 00:27:08.000000000 +0100
+++ zfs-0.7.8/include/linux/blkdev_compat.h		2018-04-07 11:07:09.779194520 +0200
@@ -32,6 +32,7 @@
 #include <linux/blkdev.h>
 #include <linux/elevator.h>
 #include <linux/backing-dev.h>
+#include <linux/version.h>
 
 #ifndef HAVE_FMODE_T
 typedef unsigned __bitwise__ fmode_t;
@@ -57,6 +57,16 @@ blk_queue_set_write_cache(struct request
 {
 #if defined(HAVE_BLK_QUEUE_WRITE_CACHE_GPL_ONLY)
 	spin_lock_irq(q->queue_lock);
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(4,17,0)
+	if (wc)
+		blk_queue_flag_set(QUEUE_FLAG_WC, q);
+	else
+		blk_queue_flag_clear(QUEUE_FLAG_WC, q);
+	if (fua)
+		blk_queue_flag_set(QUEUE_FLAG_FUA, q);
+	else
+		blk_queue_flag_clear(QUEUE_FLAG_FUA, q);
+#else
 	if (wc)
 		queue_flag_set(QUEUE_FLAG_WC, q);
 	else
@@ -65,6 +75,7 @@ blk_queue_set_write_cache(struct request
 		queue_flag_set(QUEUE_FLAG_FUA, q);
 	else
 		queue_flag_clear(QUEUE_FLAG_FUA, q);
+#endif
 	spin_unlock_irq(q->queue_lock);
 #elif defined(HAVE_BLK_QUEUE_WRITE_CACHE)
 	blk_queue_write_cache(q, wc, fua);
--- zfs-0.7.8/module/zfs/zvol.c.orig	2018-03-15 00:29:45.000000000 +0100
+++ zfs-0.7.8/module/zfs/zvol.c	2018-04-07 12:14:47.742506665 +0200
@@ -1667,7 +1667,11 @@ zvol_alloc(dev_t dev, const char *name)
 	blk_queue_set_read_ahead(zv->zv_queue, 1);
 
 	/* Disable write merging in favor of the ZIO pipeline. */
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(4,17,0)
+	blk_queue_flag_set(QUEUE_FLAG_NOMERGES, zv->zv_queue);
+#else
 	queue_flag_set_unlocked(QUEUE_FLAG_NOMERGES, zv->zv_queue);
+#endif
 
 	zv->zv_disk = alloc_disk(ZVOL_MINORS);
 	if (zv->zv_disk == NULL)
@@ -1818,13 +1822,25 @@ zvol_create_minor_impl(const char *name)
 	blk_queue_max_discard_sectors(zv->zv_queue,
 	    (zvol_max_discard_blocks * zv->zv_volblocksize) >> 9);
 	blk_queue_discard_granularity(zv->zv_queue, zv->zv_volblocksize);
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(4,17,0)
+	blk_queue_flag_set(QUEUE_FLAG_DISCARD, zv->zv_queue);
+#else
 	queue_flag_set_unlocked(QUEUE_FLAG_DISCARD, zv->zv_queue);
+#endif
 #ifdef QUEUE_FLAG_NONROT
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(4,17,0)
+	blk_queue_flag_set(QUEUE_FLAG_NONROT, zv->zv_queue);
+#else
 	queue_flag_set_unlocked(QUEUE_FLAG_NONROT, zv->zv_queue);
 #endif
+#endif
 #ifdef QUEUE_FLAG_ADD_RANDOM
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(4,17,0)
+	blk_queue_flag_clear(QUEUE_FLAG_ADD_RANDOM, zv->zv_queue);
+#else
 	queue_flag_clear_unlocked(QUEUE_FLAG_ADD_RANDOM, zv->zv_queue);
 #endif
+#endif
 
 	if (spa_writeable(dmu_objset_spa(os))) {
 		if (zil_replay_disable)
